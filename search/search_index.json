{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyGNews :: Overview Python Library for Scrapping Google News Feeds. Source Code: https://github.com/Law101/pygnews/ Requirements Python 3.6+ and pip PyGNews rest fully on: Feedparser Requests BeautifulSoup4 You don't need to install these separately, running the pip install below handles everything for you. Installation pip install pygnews Example # Import the Fetching Module from pygnews import fetcher # Create Fetching instance news = fetcher.PyGNews() # Get stop stories from Google News print(news.top_stories()) License This project is licensed under the terms of the MIT license.","title":"PyGNews :: Overview"},{"location":"#pygnews-overview","text":"Python Library for Scrapping Google News Feeds. Source Code: https://github.com/Law101/pygnews/","title":"PyGNews :: Overview"},{"location":"#requirements","text":"Python 3.6+ and pip PyGNews rest fully on: Feedparser Requests BeautifulSoup4 You don't need to install these separately, running the pip install below handles everything for you.","title":"Requirements"},{"location":"#installation","text":"pip install pygnews","title":"Installation"},{"location":"#example","text":"# Import the Fetching Module from pygnews import fetcher # Create Fetching instance news = fetcher.PyGNews() # Get stop stories from Google News print(news.top_stories())","title":"Example"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"Usage/fetcher/","text":"Fetcher __init__ ( self , baseURL = 'https://news.google.com/rss' , country = 'US' , language = 'en' ) special Set default parameters for PyGNews objects. Parameters: Name Type Description Default baseURL str Google News Feed URL. Defaults to constants.baseURL. 'https://news.google.com/rss' country str Base country for the Feed URL. Defaults to \"US\". 'US' language str Base language for the Feed URL. Defaults to \"en\". 'en' Source code in pygnews/fetcher.py def __init__ ( self , baseURL = constants . baseURL , country = \"US\" , language = \"en\" ): \"\"\"Set default parameters for PyGNews objects. Args: baseURL (str, optional): Google News Feed URL. Defaults to constants.baseURL. country (str, optional): Base country for the Feed URL. Defaults to \"US\". language (str, optional): Base language for the Feed URL. Defaults to \"en\". \"\"\" self . baseURL = baseURL self . country = country self . language = language location_headlines ( self , location = 'US' ) Gives a list of all articles about a specific geolocation given a country and a language Parameters: Name Type Description Default location str Abbreviation of the Country name to search. Defaults to \"US\". 'US' Returns: Type Description dict News headlines from country Source code in pygnews/fetcher.py def location_headlines ( self , location : str = \"US\" ): \"\"\"Gives a list of all articles about a specific geolocation given a country and a language Args: location (str, optional): Abbreviation of the Country name to search. Defaults to \"US\". Returns: dict: News headlines from country \"\"\" loacation_parsed = helpers . feed_parser ( self . baseURL + \"/headlines/section/geo/ {} \" . format ( location ) + helpers . set_ceid ( country = self . country , language = self . language ) ) location_news = helpers . collect_coverage ( loacation_parsed [ \"entries\" ]) return location_news search ( self , search_query = None , since_when = None , after_date = None , before_date = None ) Gives all articles based on search querry and specified date. Parameters: Name Type Description Default search_query str Search Querry. Defaults to None. None since_when [type] Time since when news was published. 2m Corresponds to 2 minutes, 2h Corresponds to 2 hours, 2d Corresponds to 2 days. Defaults to None. None after_date [type] News puclished after this date. Defaults to None. None before_date [type] News puclished before this date. Defaults to None. None Exceptions: Type Description TypeError Raise error when search queryis not given. Returns: Type Description dict News based on search query. Source code in pygnews/fetcher.py def search ( self , search_query : str = None , since_when = None , after_date = None , before_date = None , ): \"\"\"Gives all articles based on search querry and specified date. Args: search_query (str, optional): Search Querry. Defaults to None. since_when ([type], optional): Time since when news was published. 2m Corresponds to 2 minutes, 2h Corresponds to 2 hours, 2d Corresponds to 2 days. Defaults to None. after_date ([type], optional): News puclished after this date. Defaults to None. before_date ([type], optional): News puclished before this date. Defaults to None. Raises: TypeError: Raise error when search queryis not given. Returns: dict: News based on search query. \"\"\" if search_query is None : raise TypeError ( \"Input a Search Querry\" ) if since_when : search_query += \" when:\" + since_when if after_date and not since_when : after_date = helpers . date_parser ( date = after_date ) search_query += \" after:\" + after_date if before_date and not since_when : before_date = helpers . date_parser ( date = before_date ) search_query += \" before:\" + before_date search_query = helpers . search_parser ( search_query ) search_ceid = helpers . set_ceid ( country = self . country , language = self . language ) . replace ( \"?\" , \"&\" ) news_feed = helpers . feed_parser ( self . baseURL + \"/search?q= {} \" . format ( search_query ) + search_ceid ) searched_news = helpers . collect_coverage ( news_feed [ \"entries\" ]) return searched_news top_stories ( self ) Return a dictionaries of top news on Google. Returns: Type Description dict Google news top stories. Source code in pygnews/fetcher.py def top_stories ( self ): \"\"\"Return a dictionaries of top news on Google. Returns: dict: Google news top stories. \"\"\" feeder = helpers . feed_parser ( self . baseURL + helpers . set_ceid ( country = self . country , language = self . language ) ) entries_dict = helpers . collect_coverage ( feeder [ \"entries\" ]) return entries_dict topic_headlines ( self , topic = 'WORLD' ) Return a list of all articles from the topic page of Google News given a country and a language Parameters: Name Type Description Default topic str topic of interest. Defaults to \"WORLD\". Available Topics include WORLD, NATION, BUSINESS, TECHNOLOGY, ENTERTAINMENT, SCIENCE, SPORTS, HEALTH. 'WORLD' Exceptions: Type Description Exception When Topic is not in the listed Topics Returns: Type Description dict Topic headlines Source code in pygnews/fetcher.py def topic_headlines ( self , topic : str = \"WORLD\" ): \"\"\" Return a list of all articles from the topic page of Google News given a country and a language Args: topic (str, optional): topic of interest. Defaults to \"WORLD\". Available Topics include WORLD, NATION, BUSINESS, TECHNOLOGY, ENTERTAINMENT, SCIENCE, SPORTS, HEALTH. Raises: Exception: When Topic is not in the listed Topics Returns: dict: Topic headlines \"\"\" if topic . upper () in constants . TOPICS : passed_feed = helpers . feed_parser ( self . baseURL + \"/headlines/section/topic/ {} \" . format ( topic . upper ()) + helpers . set_ceid ( country = self . country , language = self . language ) ) else : passed_feed = helpers . feed_parser ( self . baseURL + \"/topics/ {} \" . format ( topic ) + helpers . set_ceid ( country = self . country , language = self . language ) ) headlines = helpers . collect_coverage ( passed_feed [ \"entries\" ]) if len ( headlines ) > 0 : return headlines else : raise Exception ( \"Unsupported Topic, Only the following Topics are allowed {} \" . format ( constants . TOPICS ) )","title":"Fetcher"},{"location":"Usage/fetcher/#fetcher","text":"","title":"Fetcher"},{"location":"Usage/fetcher/#pygnews.fetcher.PyGNews.__init__","text":"Set default parameters for PyGNews objects. Parameters: Name Type Description Default baseURL str Google News Feed URL. Defaults to constants.baseURL. 'https://news.google.com/rss' country str Base country for the Feed URL. Defaults to \"US\". 'US' language str Base language for the Feed URL. Defaults to \"en\". 'en' Source code in pygnews/fetcher.py def __init__ ( self , baseURL = constants . baseURL , country = \"US\" , language = \"en\" ): \"\"\"Set default parameters for PyGNews objects. Args: baseURL (str, optional): Google News Feed URL. Defaults to constants.baseURL. country (str, optional): Base country for the Feed URL. Defaults to \"US\". language (str, optional): Base language for the Feed URL. Defaults to \"en\". \"\"\" self . baseURL = baseURL self . country = country self . language = language","title":"__init__()"},{"location":"Usage/fetcher/#pygnews.fetcher.PyGNews.location_headlines","text":"Gives a list of all articles about a specific geolocation given a country and a language Parameters: Name Type Description Default location str Abbreviation of the Country name to search. Defaults to \"US\". 'US' Returns: Type Description dict News headlines from country Source code in pygnews/fetcher.py def location_headlines ( self , location : str = \"US\" ): \"\"\"Gives a list of all articles about a specific geolocation given a country and a language Args: location (str, optional): Abbreviation of the Country name to search. Defaults to \"US\". Returns: dict: News headlines from country \"\"\" loacation_parsed = helpers . feed_parser ( self . baseURL + \"/headlines/section/geo/ {} \" . format ( location ) + helpers . set_ceid ( country = self . country , language = self . language ) ) location_news = helpers . collect_coverage ( loacation_parsed [ \"entries\" ]) return location_news","title":"location_headlines()"},{"location":"Usage/fetcher/#pygnews.fetcher.PyGNews.search","text":"Gives all articles based on search querry and specified date. Parameters: Name Type Description Default search_query str Search Querry. Defaults to None. None since_when [type] Time since when news was published. 2m Corresponds to 2 minutes, 2h Corresponds to 2 hours, 2d Corresponds to 2 days. Defaults to None. None after_date [type] News puclished after this date. Defaults to None. None before_date [type] News puclished before this date. Defaults to None. None Exceptions: Type Description TypeError Raise error when search queryis not given. Returns: Type Description dict News based on search query. Source code in pygnews/fetcher.py def search ( self , search_query : str = None , since_when = None , after_date = None , before_date = None , ): \"\"\"Gives all articles based on search querry and specified date. Args: search_query (str, optional): Search Querry. Defaults to None. since_when ([type], optional): Time since when news was published. 2m Corresponds to 2 minutes, 2h Corresponds to 2 hours, 2d Corresponds to 2 days. Defaults to None. after_date ([type], optional): News puclished after this date. Defaults to None. before_date ([type], optional): News puclished before this date. Defaults to None. Raises: TypeError: Raise error when search queryis not given. Returns: dict: News based on search query. \"\"\" if search_query is None : raise TypeError ( \"Input a Search Querry\" ) if since_when : search_query += \" when:\" + since_when if after_date and not since_when : after_date = helpers . date_parser ( date = after_date ) search_query += \" after:\" + after_date if before_date and not since_when : before_date = helpers . date_parser ( date = before_date ) search_query += \" before:\" + before_date search_query = helpers . search_parser ( search_query ) search_ceid = helpers . set_ceid ( country = self . country , language = self . language ) . replace ( \"?\" , \"&\" ) news_feed = helpers . feed_parser ( self . baseURL + \"/search?q= {} \" . format ( search_query ) + search_ceid ) searched_news = helpers . collect_coverage ( news_feed [ \"entries\" ]) return searched_news","title":"search()"},{"location":"Usage/fetcher/#pygnews.fetcher.PyGNews.top_stories","text":"Return a dictionaries of top news on Google. Returns: Type Description dict Google news top stories. Source code in pygnews/fetcher.py def top_stories ( self ): \"\"\"Return a dictionaries of top news on Google. Returns: dict: Google news top stories. \"\"\" feeder = helpers . feed_parser ( self . baseURL + helpers . set_ceid ( country = self . country , language = self . language ) ) entries_dict = helpers . collect_coverage ( feeder [ \"entries\" ]) return entries_dict","title":"top_stories()"},{"location":"Usage/fetcher/#pygnews.fetcher.PyGNews.topic_headlines","text":"Return a list of all articles from the topic page of Google News given a country and a language Parameters: Name Type Description Default topic str topic of interest. Defaults to \"WORLD\". Available Topics include WORLD, NATION, BUSINESS, TECHNOLOGY, ENTERTAINMENT, SCIENCE, SPORTS, HEALTH. 'WORLD' Exceptions: Type Description Exception When Topic is not in the listed Topics Returns: Type Description dict Topic headlines Source code in pygnews/fetcher.py def topic_headlines ( self , topic : str = \"WORLD\" ): \"\"\" Return a list of all articles from the topic page of Google News given a country and a language Args: topic (str, optional): topic of interest. Defaults to \"WORLD\". Available Topics include WORLD, NATION, BUSINESS, TECHNOLOGY, ENTERTAINMENT, SCIENCE, SPORTS, HEALTH. Raises: Exception: When Topic is not in the listed Topics Returns: dict: Topic headlines \"\"\" if topic . upper () in constants . TOPICS : passed_feed = helpers . feed_parser ( self . baseURL + \"/headlines/section/topic/ {} \" . format ( topic . upper ()) + helpers . set_ceid ( country = self . country , language = self . language ) ) else : passed_feed = helpers . feed_parser ( self . baseURL + \"/topics/ {} \" . format ( topic ) + helpers . set_ceid ( country = self . country , language = self . language ) ) headlines = helpers . collect_coverage ( passed_feed [ \"entries\" ]) if len ( headlines ) > 0 : return headlines else : raise Exception ( \"Unsupported Topic, Only the following Topics are allowed {} \" . format ( constants . TOPICS ) )","title":"topic_headlines()"},{"location":"Usage/helpers/","text":"","title":"Helpers"}]}